CREATE DATABASE IF NOT EXISTS ECOMMERCE_DESAFIO;
USE ECOMMERCE_DESAFIO;

CREATE TABLE IF NOT EXISTS CLIENTS(
  ID_CLIENT INT AUTO_INCREMENT,
  FNAME VARCHAR(20) NOT NULL,
  MINIT VARCHAR(3),
  LNAME VARCHAR(20) NOT NULL,
  CPF_CNPJ ENUM('CPF','CNPJ') DEFAULT 'CPF' NOT NULL,
  CPF_CNPJ_NUMBER VARCHAR(15),
  BIRTH_DATE DATE NOT NULL,
  ADDRESS VARCHAR(60) NOT NULL,
  PRIMARY KEY (ID_CLIENT)
);

CREATE TABLE IF NOT EXISTS ORDERS(
    ID_ORDER INT PRIMARY KEY AUTO_INCREMENT,
    ID_CLIENT INT NOT NULL,
    ORDER_STATUS ENUM('CANCELADO','CONFIRMADO','EM PROCESSAMENTO') DEFAULT 'EM PROCESSAMENTO',
    CONSTRAINT FK_ORDER_CLIENT FOREIGN KEY (ID_CLIENT) REFERENCES CLIENTS(ID_CLIENT)
);

CREATE TABLE IF NOT EXISTS PRODUCTS(
    ID_PRODUCTS INT(6) PRIMARY KEY,
    PNAME VARCHAR(60) NOT NULL,
    CATEGORY ENUM('PNEUS', 'QUADROS', 'CORRENTES', 'RODAS', 'GUIDÕES', 'CÂMBIOS', 'ACESSÓRIOS') NOT NULL,
    BRAND VARCHAR(20) NOT NULL,
    VALUE FLOAT NOT NULL
);

CREATE TABLE IF NOT EXISTS SUPPLIER(
    ID_SUPPLIER INT PRIMARY KEY AUTO_INCREMENT,
    SOCIAL_NAME VARCHAR(255) NOT NULL,
    CNPJ CHAR(15) NOT NULL,
    SUPPLIER_LOCATION VARCHAR(255) NOT NULL,
    CONTACT CHAR(11) NOT NULL,
    EMAIL VARCHAR(255) NOT NULL,
    CONSTRAINT UNIQUE_SUPPLIER UNIQUE(CNPJ)
);

CREATE TABLE IF NOT EXISTS PRODUCT_SUPPLIER(
    ID_PS_SUPPLIER INT NOT NULL,
    ID_PS_PRODUCT INT(6) NOT NULL,
    QUANTITY INT NOT NULL,
    PRIMARY KEY (ID_PS_SUPPLIER, ID_PS_PRODUCT),
    CONSTRAINT FK_PS_PRODUCT FOREIGN KEY (ID_PS_PRODUCT) REFERENCES PRODUCTS(ID_PRODUCTS),
    CONSTRAINT FK_PS_SUPPLIER FOREIGN KEY (ID_PS_SUPPLIER) REFERENCES SUPPLIER(ID_SUPPLIER)
);

CREATE TABLE IF NOT EXISTS PRODUCT_ORDER(
    ID_PO_PRODUCT INT NOT NULL,
    ID_PO_ORDER INT NOT NULL,
    PO_QUANTITY INT NOT NULL,
    PO_STATUS ENUM('DISPONÍVEL','SEM ESTOQUE') NOT NULL,
    PRIMARY KEY (ID_PO_PRODUCT, ID_PO_ORDER),
    CONSTRAINT FK_PO_ORDER FOREIGN KEY (ID_PO_ORDER) REFERENCES ORDERS(ID_ORDER),
    CONSTRAINT FK_PO_PRODUCT FOREIGN KEY (ID_PO_PRODUCT) REFERENCES PRODUCTS(ID_PRODUCTS)
);

CREATE TABLE IF NOT EXISTS STORAGE_PRODUCT(
    ID_SL_PRODUCT INT PRIMARY KEY,
    SL_LOCATION CHAR(3) NOT NULL,
    QUANTITY INT NOT NULL,
    CONSTRAINT FK_SL_PRODUCT FOREIGN KEY (ID_SL_PRODUCT) REFERENCES PRODUCTS(ID_PRODUCTS)
);

CREATE TABLE IF NOT EXISTS PAYMENT(
    ID_PAYMENT INT PRIMARY KEY,
    PAYMENT ENUM('CARTÃO','PIX') NOT NULL,
    CONSTRAINT FK_PAYMENT FOREIGN KEY (ID_PAYMENT) REFERENCES ORDERS(ID_ORDER)
);

CREATE TABLE IF NOT EXISTS SHIPPING_AREA(
    ID_SHIPPING_AREA INT PRIMARY KEY,
    AREA VARCHAR(45) NOT NULL
);

CREATE TABLE IF NOT EXISTS SHIPPING_COMPANY(
    ID_SHIPPING_COMPANY INT(4) PRIMARY KEY,
    COMPANY_NAME VARCHAR(255) NOT NULL,
    COMPANY_LOCATION VARCHAR(255) NOT NULL,
    COMPANY_CONTACT CHAR(11) NOT NULL,
    COMPANY_CNPJ CHAR(15) NOT NULL,
    EMAIL VARCHAR(255) NOT NULL,
    ID_SHIPPING_AREA INT NOT NULL,
    CONSTRAINT FK_SHIPPING_COMPANY FOREIGN KEY (ID_SHIPPING_AREA) REFERENCES SHIPPING_AREA(ID_SHIPPING_AREA)
);

CREATE TABLE IF NOT EXISTS SHIPPING(
    SHIPPING_CODE INT AUTO_INCREMENT,
    ID_SHIPPING INT NOT NULL,
    SHIPPING_STATUS ENUM('AGUARDANDO CONFIRMAÇÃO','GERANDO NOTA FISCAL','AGUARDANDO TRANSPORTE','SAIU PARA ENTREGA','PRODUTO ENTREGUE') DEFAULT 'AGUARDANDO CONFIRMAÇÃO',
    ID_SHIPPING_COMPANY INT NOT NULL,
    PRIMARY KEY (SHIPPING_CODE),
    CONSTRAINT FK_SHIPPING FOREIGN KEY (ID_SHIPPING) REFERENCES PRODUCT_ORDER(ID_PO_ORDER),
    CONSTRAINT FK_SHIPPING_SHIPPING_COMPANY FOREIGN KEY (ID_SHIPPING_COMPANY) REFERENCES SHIPPING_COMPANY(ID_SHIPPING_COMPANY)
);

INSERT INTO CLIENTS(FNAME,MINIT,LNAME,CPF_CNPJ,CPF_CNPJ_NUMBER,BIRTH_DATE,ADDRESS) VALUES
    ('ALEX', 'S', 'ALVES','CPF' ,'12345678901','1981-01-12', 'RUA UM, 01 - BAIRRO 01 - CIDADE 01 - SP'),
    ('RAFAEL', 'S', 'SILVA','CPF','12345678902','1997-03-23', 'RUA DOIS, 02 - BAIRRO 02 - CIDADE 02 - SP'),
    ('DIOGO', 'O', 'OLIVEIRA','CPF', '12345678903','1993-01-06', 'RUA TRÊS, 03 - BAIRRO 03 - CIDADE 03 - SP'),
    ('GUSTAVO', 'R', 'SANTOS','CPF', '12345678904','1975-03-30', 'RUA QUATRO, 04 - BAIRRO 04 - CIDADE 04 - SP'),
    ('ANA', 'G', 'MEDEIROS','CPF', '12345678905','2000-11-17', 'RUA CINCO, 05 - BAIRRO 05 - CIDADE 05 - SP'),
    ('ROBERTA', 'P', 'FERREIRA','CPF', '12345678906','2002-02-22', 'RUA SEIS, 06 - BAIRRO 06 - CIDADE 06 - SP'),
    ('MARIA', 'S', 'GONÇALVES','CPF', '12345678907','2003-03-23', 'RUA SETE, 07 - BAIRRO 07 - CIDADE 07 - SP'),
    ('RICARDO', 'B', 'PEREIRA','CPF', '12345678908','1996-04-16', 'RUA OITO, 08 - BAIRRO 08 - CIDADE 08 - SP'),
    ('BRUNO', 'R', 'ALBUQUERQUE','CPF', '12345678909','1992-08-10', 'RUA NOVE, 09 - BAIRRO 09 - CIDADE 09 - SP'),
    ('BRUNA', 'T', 'RODRIGUES','CPF', '12345678910','1991-05-15', 'RUA DEZ, 10 - BAIRRO 10 - CIDADE 10 - SP');

INSERT INTO ORDERS(ID_CLIENT,ORDER_STATUS) VALUES
    (1,'CONFIRMADO'),
    (2,'EM PROCESSAMENTO'),
    (3,'CONFIRMADO'),
    (4,'CANCELADO'),
    (5,'EM PROCESSAMENTO'),
    (6,'CONFIRMADO'),
    (7,'CONFIRMADO'),
    (8,'CONFIRMADO'),
    (9,'CONFIRMADO'),
    (10,'CANCELADO');

INSERT INTO PRODUCTS(ID_PRODUCTS,PNAME,CATEGORY,BRAND,VALUE) VALUES
    (100001, 'CONJUNTO PNEU VELOCIDADE X80', 'PNEUS', 'PERILLE', 600.00),
    (100002, 'CONJUNTO PNEU URBANO X100 ', 'PNEUS', 'MECHILAN', 200.00),
    (100003, 'CONJUNTO PNEU OFFROAD X 200', 'PNEUS', 'GRAN MADDU', 530.00),
    (200001, 'QUADRO VELOCIDADE ALFA', 'QUADROS', 'LIGHT RIDE', 720.00),
    (200002, 'QUADRO URBANO BETA', 'QUADROS', 'SEMY', 300.00),
    (200003, 'QUADRO MOUNTAIN GAMA', 'QUADROS', 'CAROI', 715.00),
    (300001, 'CONJUNTO CORRENTE VELOCIDADE', 'CORRENTES', 'SHOMINA', 370.00),
    (300002, 'CONJUNTO CORRENTE URBANO', 'CORRENTES', 'SHOMINA', 80.00),
    (300003, 'CONJUNTO CORRENTE MOUNTAIN', 'CORRENTES', 'SHOMINA', 250.00),
    (400001, 'CONJUNTO RODA VELOCIDADE', 'RODAS', 'LIGHT RIDE', 1349.00),
    (400002, 'CONJUNTO RODA URBANO', 'RODAS', 'SEMY', 440.00),
    (400003, 'CONJUNTO RODA MOUNTAIN', 'RODAS', 'CAROI', 1791.00),
    (500001, 'GUIDÃO VELOCIDADE', 'GUIDÕES', 'LIGHT RIDE', 100.00),
    (500002, 'GUIDÃO URBANO', 'GUIDÕES', 'SEMY', 39.50),
    (500003, 'GUIDÃO MOUNTAIN', 'GUIDÕES', 'CAROI', 90.00),
    (600001, 'CONJUNTO CÂMBIO VELOCIDADE', 'CÂMBIOS', 'SHOMINA', 450.00),
    (600002, 'CONJUNTO CÂMBIO URBANO', 'CÂMBIOS', 'SHOMINA', 100.00),
    (600003, 'CONJUNTO CÂMBIO MOUNTAIN', 'CÂMBIOS', 'SHOMINA', 150.00),
    (700001, 'BANCO SPEED', 'ACESSÓRIOS', 'SELUM', 97.00),
    (700002, 'BANCO URBANO', 'ACESSÓRIOS', 'SELUM', 45.00),
    (700003, 'BANCO MOUNTAIN', 'ACESSÓRIOS', 'SELUM', 95.00),
    (700004, 'MANOPLA GUIDÃO VELOCIDADE', 'ACESSÓRIOS', 'SELUM', 71.00),
    (700005, 'MANOPLA GUIDÃO URBANO', 'ACESSÓRIOS', 'SELUM', 32.00),
    (700006, 'MANOPLA GUIDÃO MOUNTAIN', 'ACESSÓRIOS', 'SELUM', 57.00),
    (700007, 'KIT REPARO', 'ACESSÓRIOS', 'SELUM', 67.50),
    (700008, 'BOMBA MANUAL', 'ACESSÓRIOS', 'SELUM', 20.90);

INSERT INTO SUPPLIER(SOCIAL_NAME,CNPJ,SUPPLIER_LOCATION,CONTACT,EMAIL) VALUES
    ('BIKE PARTS LTDA', '679534612123987', 'AVENIDA CINCO ZERO, 1230 - BAIRRO NOVA VELHA - CIDADE 01 - SP', '1144556677', 'BIKEPARTS@EMAIL.COM'),
    ('PROFESSIONAL BIKERS LTDA', '198753285987456', 'AVENIDA SETE DOIS, 432 - BAIRRO VELHA VELHA - CIDADE 02 - SP', '1122334455', 'PROFESSIONALBIKERS@EMAIL.COM'),
    ('LOJA DO BIKER LTDA', '651351681651238', 'RUA DOS TRÊS, 12 - BAIRRO NOVO NOVO - CIDADE 03 - SP', '1199665511', 'LOJADOBIKER@EMAIL.COM'),
    ('BIKERS ROAD LTDA', '316841649949849', 'RUA SEIS SETE, 543 - BAIRRO VELHA NOVA - CIDADE 04 - SP', '1188554422', 'BIKERSROAD@EMAIL.COM');

INSERT INTO PRODUCT_SUPPLIER(ID_PS_SUPPLIER,ID_PS_PRODUCT,QUANTITY) VALUES
    (1,100001,20),
    (2,200002,25),
    (3,300003,15),
    (4,700007,30),
    (2,500001,20),
    (4,400001,17),
    (1,200003,19),
    (4,400003,15),
    (3,700005,23),
    (1,300002,30),
    (1,100002,30);

INSERT INTO PRODUCT_ORDER(ID_PO_PRODUCT,ID_PO_ORDER,PO_QUANTITY,PO_STATUS) VALUES
    (100001, 1, 2, 'DISPONÍVEL'),
    (300002, 2, 3, 'DISPONÍVEL'),
    (500003, 3, 2, 'DISPONÍVEL'),
    (700001, 4, 2, 'DISPONÍVEL'),
    (700002, 5, 4, 'DISPONÍVEL'),
    (600001, 6, 2, 'DISPONÍVEL'),
    (400003, 7, 1, 'DISPONÍVEL'),
    (300003, 8, 1, 'DISPONÍVEL'),
    (400002, 9, 2, 'DISPONÍVEL'),
    (100002, 10, 5, 'DISPONÍVEL');

INSERT INTO STORAGE_PRODUCT VALUES
    (100001, 'A1', 10),
    (100002, 'A2', 20),
    (100003, 'A3', 7),
    (200001, 'B1', 11),
    (200002, 'B2', 15),
    (200003, 'B3', 6),
    (300001, 'C1', 5),
    (300002, 'C2', 10),
    (300003, 'C3', 6),
    (400001, 'D1', 15),
    (400002, 'D2', 20),
    (400003, 'D3', 11),
    (500001, 'E1', 7),
    (500002, 'E2', 5),
    (500003, 'E3', 6),
    (600001, 'F1', 4),
    (600002, 'F2', 6),
    (600003, 'F3', 5),
    (700001, 'G1', 6),
    (700002, 'G2', 7),
    (700003, 'G3', 9),
    (700004, 'G4', 10),
    (700005, 'G5', 11),
    (700006, 'G6', 12),
    (700007, 'G7', 11),
    (700008, 'G8', 13);

INSERT INTO PAYMENT VALUES  
    (1, 'PIX'),
    (2, 'PIX'),
    (3, 'CARTÃO'),
    (4, 'PIX'),
    (5, 'PIX'),
    (6, 'CARTÃO'),
    (7, 'PIX'),
    (8, 'CARTÃO'),
    (9, 'CARTÃO'),
    (10, 'CARTÃO');

INSERT INTO SHIPPING_AREA VALUES
    (1, 'NORTE'),
    (2, 'LESTE'),
    (3, 'OESTE'),
    (4, 'SUL');

INSERT INTO SHIPPING_COMPANY VALUES
    (0001, 'ENTREGA RAPIDA LTDA', 'RUA VELOZ, 100 - BAIRRO VELOZ - CIDADE 01 - SP', '1112344321', '123456789123456', 'ENTREGARAPIDA@EMAIL.COM', 1),
    (0002, 'RAPIDEX LTDA', 'RUA RÁPIDA, 300 - BAIRRO RÁPIDO - CIDADE 02 - SP', '1143211234', '987654321987654', 'RAPIDEXENTREGA@EMAIL.COM', 2),
    (0003, 'JÁ CHEGOU LTDA', 'RUA VELOCIDADE, 123 - BAIRRO VLOECIDADE - CIDADE 03 - SP', '1123456789', '456789123456123', 'JACHEGOU@EMAIL.COM', 3),
    (0004, 'VAPT VUPT LTDA', 'RUA VRUMM, 321 - BAIRRO ACELERAÇÃO - CIDADE 04 - SP', '1198765432', '654987123456987', 'VAPTVUPT@EMAIL.COM', 4);

INSERT INTO SHIPPING(ID_SHIPPING,SHIPPING_STATUS,ID_SHIPPING_COMPANY) VALUES
    (1,'AGUARDANDO CONFIRMAÇÃO',1),
    (2,'AGUARDANDO TRANSPORTE',2),
    (3,'GERANDO NOTA FISCAL',3),
    (4,'PRODUTO ENTREGUE',4),
    (5,'SAIU PARA ENTREGA',2),
    (6,'GERANDO NOTA FISCAL',4),
    (7,'GERANDO NOTA FISCAL',3),
    (8,'AGUARDANDO CONFIRMAÇÃO',1),
    (9,'AGUARDANDO CONFIRMAÇÃO',1),
    (10,'AGUARDANDO CONFIRMAÇÃO',4);
    
SELECT * FROM CLIENTS;
SELECT * FROM ORDERS;
SELECT * FROM PAYMENT;
SELECT * FROM PRODUCTS;
SELECT * FROM PRODUCT_ORDER;
SELECT * FROM PRODUCT_SUPPLIER;
SELECT * FROM SHIPPING;
SELECT * FROM SHIPPING_AREA;
SELECT * FROM SHIPPING_COMPANY;
SELECT * FROM STORAGE_PRODUCT;
SELECT * FROM SUPPLIER;

-- QUANTIDADE DE PAGAMENTO EM PIX COM RELAÇÃO AOS PAGAMENTOS EM CARTÃO
SELECT PAY.PAYMENT AS 'PAGAMENTO', CONCAT('R$',' ',SUM(PRO.VALUE*PORD.PO_QUANTITY)) AS 'TOTAL',COUNT(*) AS 'QUANTIDADE'
    FROM PRODUCTS PRO, PRODUCT_ORDER PORD 
    INNER JOIN PAYMENT PAY, ORDERS ORD
    WHERE PRO.ID_PRODUCTS = PORD.ID_PO_PRODUCT AND ORD.ID_ORDER = ID_PAYMENT AND ORD.ID_ORDER = ID_PO_ORDER 
    GROUP BY PAY.PAYMENT;

-- STATUS DOS PEDIDOS AGUARDANDO CONFIRMAÇÃO E RENDA EM ABERTO
SELECT SHIPPING_STATUS AS STATUS,CONCAT('R$',' ',SUM(PRO.VALUE*PORD.PO_QUANTITY)) AS TOTAL, COUNT(*) AS QNT
    FROM SHIPPING SHIP, PRODUCT_ORDER PORD 
    INNER JOIN PRODUCTS PRO
    WHERE SHIP.SHIPPING_STATUS = 'AGUARDANDO CONFIRMAÇÃO' AND SHIP.ID_SHIPPING = PORD.ID_PO_ORDER AND PRO.ID_PRODUCTS = PORD.ID_PO_PRODUCT
    GROUP BY SHIPPING_STATUS;

-- ESTOQUE DEPOIS DA CONCLUSÃO DE TODAS AS VENDAS AINDA NÃO SEPARADAS PARA FATURAMENTO
SELECT STO.ID_SL_PRODUCT AS 'ID PRODUTO',PORD.PO_QUANTITY AS 'QNT PEDIDO',STO.QUANTITY AS 'QNT ESTOQUE',(STO.QUANTITY - PORD.PO_QUANTITY) AS SALDO
    FROM PRODUCT_ORDER PORD, STORAGE_PRODUCT STO 
    INNER JOIN ORDERS ORD, SHIPPING SH
    WHERE STO.ID_SL_PRODUCT = PORD.ID_PO_PRODUCT AND ORD.ID_ORDER = PORD.ID_PO_ORDER AND SH.ID_SHIPPING = ORD.ID_ORDER 
    AND SH.SHIPPING_STATUS = 'AGUARDANDO CONFIRMAÇÃO'
    ORDER BY 'ID PRODUTO';

-- NÍVEL DO ESTOQUE ATUAL
SELECT ID_SL_PRODUCT AS 'ID PRODUTO',QUANTITY AS 'QNT ESTOQUE', CASE
    WHEN QUANTITY <= 5 THEN 'BAIXO'
    WHEN QUANTITY >= 20  THEN 'ALTO'
    ELSE 'MÉDIO'
    END AS NÍVEL
    FROM STORAGE_PRODUCT
    GROUP BY ID_SL_PRODUCT;


-- VALOR TOTAL DE COMPRAS DE PESSOAS NASCIDAS DEPOIS DE 1990
SELECT CONCAT(FNAME,' ',MINIT,'. ',LNAME) AS CLIENTE, BIRTH_DATE AS NASCIMENTO, VALUE AS COMPRA
    FROM CLIENTS CL
    INNER JOIN ORDERS ORD ON CL.ID_CLIENT = ORD.ID_CLIENT
    INNER JOIN PRODUCT_ORDER PORD ON PORD.ID_PO_ORDER = ORD.ID_ORDER
    INNER JOIN PRODUCTS PRO ON PORD.ID_PO_PRODUCT = PRO.ID_PRODUCTS
    HAVING BIRTH_DATE >= '1990-01-01'
    ORDER BY VALUE;
